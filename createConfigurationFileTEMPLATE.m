fprintf(FID, '## Version  (rev 0, built on Aug  8 2019)  \n');
fprintf(FID, '\n');
fprintf(FID, '[default]  \n');
fprintf(FID, 'Maximum no. of line search iterations    = 12  \n');
fprintf(FID, 'Bending energy weight                    = 0.0005  \n');
fprintf(FID, 'Linear energy weight                     = 0.0005  \n');
fprintf(FID, 'Topology preservation weight             = 0.1  \n');
fprintf(FID, 'Volume preservation weight               = 0.1  \n');
fprintf(FID, 'Reuse previous step length               = Yes  \n');
fprintf(FID, 'Strict step length range                 = Yes  \n');
fprintf(FID, 'Maximum streak of rejected steps         = 3  \n');
fprintf(FID, 'Transformation model                     = Rigid+BSplineFFD  \n');
fprintf(FID, 'Multi-level transformation               = Default  \n');
fprintf(FID, 'Merge global and local transformation    = No  \n');
fprintf(FID, 'Dirichlet boundary condition             = No  \n');
fprintf(FID, 'Optimization method                      = ConjugateGradientDescent  \n');
fprintf(FID, 'No. of resolution levels                 = 4  \n');
fprintf(FID, 'Final level                              = 1  \n');
fprintf(FID, 'Precompute image derivatives             = Yes  \n');
fprintf(FID, 'Maximum rescaled intensities             = inf  \n');
fprintf(FID, 'Normalize weights of energy terms        = Yes  \n');
fprintf(FID, 'Downsample images with padding           = Yes  \n');
fprintf(FID, 'Crop/pad images                          = Yes  \n');
fprintf(FID, 'Crop/pad lattice                         = Yes  \n');
fprintf(FID, 'Adaptive surface remeshing               = No  \n');
fprintf(FID, 'Background value                         = -1  \n');
fprintf(FID, 'Image interpolation                      = Default  \n');
fprintf(FID, 'Image extrapolation                      = Default  \n');
fprintf(FID, 'Use Gaussian image resolution pyramid    = Yes  \n');
fprintf(FID, 'Control point spacing [mm]               = 20  \n');
fprintf(FID, '\n');
fprintf(FID, '[level 1]  \n');
fprintf(FID, 'Minimum length of steps                  = 0.01  \n');
fprintf(FID, 'Maximum length of steps                  = 1  \n');
fprintf(FID, 'Allow translations                       = Yes  \n');
fprintf(FID, 'Allow rotations                          = Yes  \n');
fprintf(FID, 'Allow scaling                            = Yes  \n');
fprintf(FID, 'Allow shearing                           = Yes  \n');
fprintf(FID, 'Transformation extrapolation             = Const  \n');
fprintf(FID, 'Speedup factor                           = 1  \n');
fprintf(FID, 'B-spline FFD gradient calculationn       = Default  \n');
fprintf(FID, 'Image dissimilarity weight (signed)      = 1  \n');
fprintf(FID, 'Image dissimilarity relative to initial value = Yes  \n');
fprintf(FID, 'Image dissimilarity foreground region    = Overlap  \n');
fprintf(FID, 'Image dissimilarity normalize image gradient = Yes  \n');
fprintf(FID, 'Image dissimilarity approximate gradient = No  \n');
fprintf(FID, 'Image dissimilarity preconditioning (voxel-wise) = 0  \n');
fprintf(FID, 'Image dissimilarity preconditioning (node-based) = 0  \n');
fprintf(FID, 'Image dissimilarity blurring of image gradient = 0  \n');
fprintf(FID, 'Image dissimilarity blurring of image hessian = 0  \n');
fprintf(FID, 'No. of bins                              = 64  \n');
fprintf(FID, 'Use Parzen window estimation             = Yes  \n');
fprintf(FID, 'Pad Parzen window estimation             = No  \n');
fprintf(FID, 'Bending energy weight (signed)           = 0.0005  \n');
fprintf(FID, 'Bending energy relative to initial value = No  \n');
fprintf(FID, 'Bending energy at passive control points = No  \n');
fprintf(FID, 'Bending energy w.r.t. world              = Yes  \n');
fprintf(FID, 'Bending energy use lattice spacing       = No  \n');
fprintf(FID, 'Bending energy annealing rate (experimental) = 0  \n');
fprintf(FID, 'Linear energy weight (signed)            = 0.0005  \n');
fprintf(FID, 'Linear energy relative to initial value  = No  \n');
fprintf(FID, 'Linear energy at passive control points  = No  \n');
fprintf(FID, 'Linear energy approximate                = Yes  \n');
fprintf(FID, 'Linear energy w.r.t. world               = Yes  \n');
fprintf(FID, 'Linear energy use lattice spacing        = No  \n');
fprintf(FID, 'Linear energy rotation                   = Yes  \n');
fprintf(FID, 'Linear energy lambda                     = 0  \n');
fprintf(FID, 'Linear energy mu                         = 1  \n');
fprintf(FID, 'Topology preservation weight (signed)    = 0.1  \n');
fprintf(FID, 'Topology preservation relative to initial value = No  \n');
fprintf(FID, 'Topology preservation at passive control points = No  \n');
fprintf(FID, 'Topology preservation domain             = Shifted  \n');
fprintf(FID, 'Topology preservation w.r.t. world       = Yes  \n');
fprintf(FID, 'Topology preservation use lattice spacing = No  \n');
fprintf(FID, 'Topology preservation symmetric          = Yes  \n');
fprintf(FID, 'Topology preservation gamma              = 0.5  \n');
fprintf(FID, 'Topology preservation epsilon            = 0.01  \n');
fprintf(FID, 'Topology preservation power              = 2  \n');
fprintf(FID, 'Volume preservation weight (signed)      = 0.1  \n');
fprintf(FID, 'Volume preservation relative to initial value = No  \n');
fprintf(FID, 'Volume preservation at passive control points = No  \n');
fprintf(FID, 'Volume preservation domain               = Lattice  \n');
fprintf(FID, 'Volume preservation w.r.t. world         = Yes  \n');
fprintf(FID, 'Volume preservation use lattice spacing  = No  \n');
fprintf(FID, 'Volume preservation symmetric            = Yes  \n');
fprintf(FID, 'Volume preservation epsilon              = 0.005  \n');
fprintf(FID, 'LogJac penalty weight (signed)           = 0  \n');
fprintf(FID, 'LogJac penalty relative to initial value = No  \n');
fprintf(FID, 'LogJac penalty at passive control points = No  \n');
fprintf(FID, 'LogJac penalty domain                    = Lattice  \n');
fprintf(FID, 'LogJac penalty w.r.t. world              = Yes  \n');
fprintf(FID, 'LogJac penalty use lattice spacing       = No  \n');
fprintf(FID, 'LogJac penalty symmetric                 = Yes  \n');
fprintf(FID, 'LogJac penalty epsilon                   = 0.005  \n');
fprintf(FID, 'NegJac penalty weight (signed)           = 0  \n');
fprintf(FID, 'NegJac penalty relative to initial value = No  \n');
fprintf(FID, 'NegJac penalty at passive control points = No  \n');
fprintf(FID, 'NegJac penalty domain                    = Shifted  \n');
fprintf(FID, 'NegJac penalty w.r.t. world              = Yes  \n');
fprintf(FID, 'NegJac penalty use lattice spacing       = No  \n');
fprintf(FID, 'NegJac penalty symmetric                 = Yes  \n');
fprintf(FID, 'NegJac penalty gamma                     = 0.5  \n');
fprintf(FID, 'NegJac penalty epsilon                   = 0.01  \n');
fprintf(FID, 'NegJac penalty power                     = 2  \n');
fprintf(FID, 'Sparsity weight (signed)                 = 0  \n');
fprintf(FID, 'Sparsity relative to initial value       = No  \n');
fprintf(FID, 'Sparsity at passive control points       = No  \n');
fprintf(FID, 'Normalize energy gradients (experimental) = No  \n');
fprintf(FID, 'Energy preconditioning                   = 0  \n');
fprintf(FID, 'Exclude constraints from energy value    = No  \n');
fprintf(FID, 'Maximum no. of iterations                = 100  \n');
fprintf(FID, 'Epsilon                                  = -0.0001  \n');
fprintf(FID, 'Delta                                    = 1e-12  \n');
fprintf(FID, 'No. of last function values              = 2  \n');
fprintf(FID, 'Maximum no. of line iterations           = 12  \n');
fprintf(FID, 'Maximum streak of rejected steps         = 3  \n');
fprintf(FID, 'Reuse previous step length               = Yes  \n');
fprintf(FID, 'Strict incremental step length range     = Yes  \n');
fprintf(FID, 'Strict total step length range           = No  \n');
fprintf(FID, 'Step length rise                         = 1.1  \n');
fprintf(FID, 'Step length drop                         = 0.5  \n');
fprintf(FID, 'Maximum no. of line search iterations    = 12  \n');
fprintf(FID, 'Strict step length range                 = Yes  \n');
fprintf(FID, 'Maximum no. of restarts                  = 100  \n');
fprintf(FID, 'Maximum no. of failed restarts           = 5  \n');
fprintf(FID, 'Line search strategy                     = Adaptive  \n');
fprintf(FID, 'Conjugate total energy gradient          = Yes  \n');
fprintf(FID, 'Resolution [mm]                          = 1 1 1  \n');
fprintf(FID, 'Blurring [mm]                            = 0.5  \n');
fprintf(FID, 'Control point spacing [mm]               = 20  \n');
fprintf(FID, '\n');
fprintf(FID, '[level 2]  \n');
fprintf(FID, 'Minimum length of steps                  = 0.01  \n');
fprintf(FID, 'Maximum length of steps                  = 2  \n');
fprintf(FID, 'Allow translations                       = Yes  \n');
fprintf(FID, 'Allow rotations                          = Yes  \n');
fprintf(FID, 'Allow scaling                            = Yes  \n');
fprintf(FID, 'Allow shearing                           = Yes  \n');
fprintf(FID, 'Transformation extrapolation             = Const  \n');
fprintf(FID, 'Speedup factor                           = 1  \n');
fprintf(FID, 'B-spline FFD gradient calculationn       = Default  \n');
fprintf(FID, 'Image dissimilarity weight (signed)      = 1  \n');
fprintf(FID, 'Image dissimilarity relative to initial value = Yes  \n');
fprintf(FID, 'Image dissimilarity foreground region    = Overlap  \n');
fprintf(FID, 'Image dissimilarity normalize image gradient = Yes  \n');
fprintf(FID, 'Image dissimilarity approximate gradient = No  \n');
fprintf(FID, 'Image dissimilarity preconditioning (voxel-wise) = 0  \n');
fprintf(FID, 'Image dissimilarity preconditioning (node-based) = 0  \n');
fprintf(FID, 'Image dissimilarity blurring of image gradient = 0  \n');
fprintf(FID, 'Image dissimilarity blurring of image hessian = 0  \n');
fprintf(FID, 'No. of bins                              = 64  \n');
fprintf(FID, 'Use Parzen window estimation             = Yes  \n');
fprintf(FID, 'Pad Parzen window estimation             = No  \n');
fprintf(FID, 'Bending energy weight (signed)           = 0.0005  \n');
fprintf(FID, 'Bending energy relative to initial value = No  \n');
fprintf(FID, 'Bending energy at passive control points = No  \n');
fprintf(FID, 'Bending energy w.r.t. world              = Yes  \n');
fprintf(FID, 'Bending energy use lattice spacing       = No  \n');
fprintf(FID, 'Bending energy annealing rate (experimental) = 0  \n');
fprintf(FID, 'Linear energy weight (signed)            = 0.0005  \n');
fprintf(FID, 'Linear energy relative to initial value  = No  \n');
fprintf(FID, 'Linear energy at passive control points  = No  \n');
fprintf(FID, 'Linear energy approximate                = Yes  \n');
fprintf(FID, 'Linear energy w.r.t. world               = Yes  \n');
fprintf(FID, 'Linear energy use lattice spacing        = No  \n');
fprintf(FID, 'Linear energy rotation                   = Yes  \n');
fprintf(FID, 'Linear energy lambda                     = 0  \n');
fprintf(FID, 'Linear energy mu                         = 1  \n');
fprintf(FID, 'Topology preservation weight (signed)    = 0.1  \n');
fprintf(FID, 'Topology preservation relative to initial value = No  \n');
fprintf(FID, 'Topology preservation at passive control points = No  \n');
fprintf(FID, 'Topology preservation domain             = Shifted  \n');
fprintf(FID, 'Topology preservation w.r.t. world       = Yes  \n');
fprintf(FID, 'Topology preservation use lattice spacing = No  \n');
fprintf(FID, 'Topology preservation symmetric          = Yes  \n');
fprintf(FID, 'Topology preservation gamma              = 0.5  \n');
fprintf(FID, 'Topology preservation epsilon            = 0.01  \n');
fprintf(FID, 'Topology preservation power              = 2  \n');
fprintf(FID, 'Volume preservation weight (signed)      = 0.1  \n');
fprintf(FID, 'Volume preservation relative to initial value = No  \n');
fprintf(FID, 'Volume preservation at passive control points = No  \n');
fprintf(FID, 'Volume preservation domain               = Lattice  \n');
fprintf(FID, 'Volume preservation w.r.t. world         = Yes  \n');
fprintf(FID, 'Volume preservation use lattice spacing  = No  \n');
fprintf(FID, 'Volume preservation symmetric            = Yes  \n');
fprintf(FID, 'Volume preservation epsilon              = 0.005  \n');
fprintf(FID, 'LogJac penalty weight (signed)           = 0  \n');
fprintf(FID, 'LogJac penalty relative to initial value = No  \n');
fprintf(FID, 'LogJac penalty at passive control points = No  \n');
fprintf(FID, 'LogJac penalty domain                    = Lattice  \n');
fprintf(FID, 'LogJac penalty w.r.t. world              = Yes  \n');
fprintf(FID, 'LogJac penalty use lattice spacing       = No  \n');
fprintf(FID, 'LogJac penalty symmetric                 = Yes  \n');
fprintf(FID, 'LogJac penalty epsilon                   = 0.005  \n');
fprintf(FID, 'NegJac penalty weight (signed)           = 0  \n');
fprintf(FID, 'NegJac penalty relative to initial value = No  \n');
fprintf(FID, 'NegJac penalty at passive control points = No  \n');
fprintf(FID, 'NegJac penalty domain                    = Shifted  \n');
fprintf(FID, 'NegJac penalty w.r.t. world              = Yes  \n');
fprintf(FID, 'NegJac penalty use lattice spacing       = No  \n');
fprintf(FID, 'NegJac penalty symmetric                 = Yes  \n');
fprintf(FID, 'NegJac penalty gamma                     = 0.5  \n');
fprintf(FID, 'NegJac penalty epsilon                   = 0.01  \n');
fprintf(FID, 'NegJac penalty power                     = 2  \n');
fprintf(FID, 'Sparsity weight (signed)                 = 0  \n');
fprintf(FID, 'Sparsity relative to initial value       = No  \n');
fprintf(FID, 'Sparsity at passive control points       = No  \n');
fprintf(FID, 'Normalize energy gradients (experimental) = No  \n');
fprintf(FID, 'Energy preconditioning                   = 0  \n');
fprintf(FID, 'Exclude constraints from energy value    = No  \n');
fprintf(FID, 'Maximum no. of iterations                = 100  \n');
fprintf(FID, 'Epsilon                                  = -0.0001  \n');
fprintf(FID, 'Delta                                    = 1e-12  \n');
fprintf(FID, 'No. of last function values              = 2  \n');
fprintf(FID, 'Maximum no. of line iterations           = 12  \n');
fprintf(FID, 'Maximum streak of rejected steps         = 3  \n');
fprintf(FID, 'Reuse previous step length               = Yes  \n');
fprintf(FID, 'Strict incremental step length range     = Yes  \n');
fprintf(FID, 'Strict total step length range           = No  \n');
fprintf(FID, 'Step length rise                         = 1.1  \n');
fprintf(FID, 'Step length drop                         = 0.5  \n');
fprintf(FID, 'Maximum no. of line search iterations    = 12  \n');
fprintf(FID, 'Strict step length range                 = Yes  \n');
fprintf(FID, 'Maximum no. of restarts                  = 100  \n');
fprintf(FID, 'Maximum no. of failed restarts           = 5  \n');
fprintf(FID, 'Line search strategy                     = Adaptive  \n');
fprintf(FID, 'Conjugate total energy gradient          = Yes  \n');
fprintf(FID, 'Resolution [mm]                          = 2 2 2  \n');
fprintf(FID, 'Blurring [mm]                            = 0  \n');
fprintf(FID, 'Control point spacing [mm]               = 40  \n');
fprintf(FID, '\n');
fprintf(FID, '[level 3]  \n');
fprintf(FID, 'Minimum length of steps                  = 0.01  \n');
fprintf(FID, 'Maximum length of steps                  = 4  \n');
fprintf(FID, 'Allow translations                       = Yes  \n');
fprintf(FID, 'Allow rotations                          = Yes  \n');
fprintf(FID, 'Allow scaling                            = Yes  \n');
fprintf(FID, 'Allow shearing                           = Yes  \n');
fprintf(FID, 'Transformation extrapolation             = Const  \n');
fprintf(FID, 'Speedup factor                           = 1  \n');
fprintf(FID, 'B-spline FFD gradient calculationn       = Default  \n');
fprintf(FID, 'Image dissimilarity weight (signed)      = 1  \n');
fprintf(FID, 'Image dissimilarity relative to initial value = Yes  \n');
fprintf(FID, 'Image dissimilarity foreground region    = Overlap  \n');
fprintf(FID, 'Image dissimilarity normalize image gradient = Yes  \n');
fprintf(FID, 'Image dissimilarity approximate gradient = No  \n');
fprintf(FID, 'Image dissimilarity preconditioning (voxel-wise) = 0  \n');
fprintf(FID, 'Image dissimilarity preconditioning (node-based) = 0  \n');
fprintf(FID, 'Image dissimilarity blurring of image gradient = 0  \n');
fprintf(FID, 'Image dissimilarity blurring of image hessian = 0  \n');
fprintf(FID, 'No. of target bins                       = 60  \n');
fprintf(FID, 'No. of source bins                       = 63  \n');
fprintf(FID, 'Use Parzen window estimation             = Yes  \n');
fprintf(FID, 'Pad Parzen window estimation             = No  \n');
fprintf(FID, 'Bending energy weight (signed)           = 0.0005  \n');
fprintf(FID, 'Bending energy relative to initial value = No  \n');
fprintf(FID, 'Bending energy at passive control points = No  \n');
fprintf(FID, 'Bending energy w.r.t. world              = Yes  \n');
fprintf(FID, 'Bending energy use lattice spacing       = No  \n');
fprintf(FID, 'Bending energy annealing rate (experimental) = 0  \n');
fprintf(FID, 'Linear energy weight (signed)            = 0.0005  \n');
fprintf(FID, 'Linear energy relative to initial value  = No  \n');
fprintf(FID, 'Linear energy at passive control points  = No  \n');
fprintf(FID, 'Linear energy approximate                = Yes  \n');
fprintf(FID, 'Linear energy w.r.t. world               = Yes  \n');
fprintf(FID, 'Linear energy use lattice spacing        = No  \n');
fprintf(FID, 'Linear energy rotation                   = Yes  \n');
fprintf(FID, 'Linear energy lambda                     = 0  \n');
fprintf(FID, 'Linear energy mu                         = 1  \n');
fprintf(FID, 'Topology preservation weight (signed)    = 0.1  \n');
fprintf(FID, 'Topology preservation relative to initial value = No  \n');
fprintf(FID, 'Topology preservation at passive control points = No  \n');
fprintf(FID, 'Topology preservation domain             = Shifted  \n');
fprintf(FID, 'Topology preservation w.r.t. world       = Yes  \n');
fprintf(FID, 'Topology preservation use lattice spacing = No  \n');
fprintf(FID, 'Topology preservation symmetric          = Yes  \n');
fprintf(FID, 'Topology preservation gamma              = 0.5  \n');
fprintf(FID, 'Topology preservation epsilon            = 0.01  \n');
fprintf(FID, 'Topology preservation power              = 2  \n');
fprintf(FID, 'Volume preservation weight (signed)      = 0.1  \n');
fprintf(FID, 'Volume preservation relative to initial value = No  \n');
fprintf(FID, 'Volume preservation at passive control points = No  \n');
fprintf(FID, 'Volume preservation domain               = Lattice  \n');
fprintf(FID, 'Volume preservation w.r.t. world         = Yes  \n');
fprintf(FID, 'Volume preservation use lattice spacing  = No  \n');
fprintf(FID, 'Volume preservation symmetric            = Yes  \n');
fprintf(FID, 'Volume preservation epsilon              = 0.005  \n');
fprintf(FID, 'LogJac penalty weight (signed)           = 0  \n');
fprintf(FID, 'LogJac penalty relative to initial value = No  \n');
fprintf(FID, 'LogJac penalty at passive control points = No  \n');
fprintf(FID, 'LogJac penalty domain                    = Lattice  \n');
fprintf(FID, 'LogJac penalty w.r.t. world              = Yes  \n');
fprintf(FID, 'LogJac penalty use lattice spacing       = No  \n');
fprintf(FID, 'LogJac penalty symmetric                 = Yes  \n');
fprintf(FID, 'LogJac penalty epsilon                   = 0.005  \n');
fprintf(FID, 'NegJac penalty weight (signed)           = 0  \n');
fprintf(FID, 'NegJac penalty relative to initial value = No  \n');
fprintf(FID, 'NegJac penalty at passive control points = No  \n');
fprintf(FID, 'NegJac penalty domain                    = Shifted  \n');
fprintf(FID, 'NegJac penalty w.r.t. world              = Yes  \n');
fprintf(FID, 'NegJac penalty use lattice spacing       = No  \n');
fprintf(FID, 'NegJac penalty symmetric                 = Yes  \n');
fprintf(FID, 'NegJac penalty gamma                     = 0.5  \n');
fprintf(FID, 'NegJac penalty epsilon                   = 0.01  \n');
fprintf(FID, 'NegJac penalty power                     = 2  \n');
fprintf(FID, 'Sparsity weight (signed)                 = 0  \n');
fprintf(FID, 'Sparsity relative to initial value       = No  \n');
fprintf(FID, 'Sparsity at passive control points       = No  \n');
fprintf(FID, 'Normalize energy gradients (experimental) = No  \n');
fprintf(FID, 'Energy preconditioning                   = 0  \n');
fprintf(FID, 'Exclude constraints from energy value    = No  \n');
fprintf(FID, 'Maximum no. of iterations                = 100  \n');
fprintf(FID, 'Epsilon                                  = -0.0001  \n');
fprintf(FID, 'Delta                                    = 1e-12  \n');
fprintf(FID, 'No. of last function values              = 2  \n');
fprintf(FID, 'Maximum no. of line iterations           = 12  \n');
fprintf(FID, 'Maximum streak of rejected steps         = 3  \n');
fprintf(FID, 'Reuse previous step length               = Yes  \n');
fprintf(FID, 'Strict incremental step length range     = Yes  \n');
fprintf(FID, 'Strict total step length range           = No  \n');
fprintf(FID, 'Step length rise                         = 1.1  \n');
fprintf(FID, 'Step length drop                         = 0.5  \n');
fprintf(FID, 'Maximum no. of line search iterations    = 12  \n');
fprintf(FID, 'Strict step length range                 = Yes  \n');
fprintf(FID, 'Maximum no. of restarts                  = 100  \n');
fprintf(FID, 'Maximum no. of failed restarts           = 5  \n');
fprintf(FID, 'Line search strategy                     = Adaptive  \n');
fprintf(FID, 'Conjugate total energy gradient          = Yes  \n');
fprintf(FID, 'Resolution [mm]                          = 4 4 2  \n');
fprintf(FID, 'Blurring [mm]                            = 0  \n');
fprintf(FID, 'Control point spacing [mm]               = 80  \n');
fprintf(FID, '\n');
fprintf(FID, '[level 4]  \n');
fprintf(FID, 'Minimum length of steps                  = 0.01  \n');
fprintf(FID, 'Maximum length of steps                  = 8  \n');
fprintf(FID, 'Allow translations                       = Yes  \n');
fprintf(FID, 'Allow rotations                          = Yes  \n');
fprintf(FID, 'Allow scaling                            = Yes  \n');
fprintf(FID, 'Allow shearing                           = Yes  \n');
fprintf(FID, 'Transformation extrapolation             = Const  \n');
fprintf(FID, 'Speedup factor                           = 1  \n');
fprintf(FID, 'B-spline FFD gradient calculationn       = Default  \n');
fprintf(FID, 'Image dissimilarity weight (signed)      = 1  \n');
fprintf(FID, 'Image dissimilarity relative to initial value = Yes  \n');
fprintf(FID, 'Image dissimilarity foreground region    = Overlap  \n');
fprintf(FID, 'Image dissimilarity normalize image gradient = Yes  \n');
fprintf(FID, 'Image dissimilarity approximate gradient = No  \n');
fprintf(FID, 'Image dissimilarity preconditioning (voxel-wise) = 0  \n');
fprintf(FID, 'Image dissimilarity preconditioning (node-based) = 0  \n');
fprintf(FID, 'Image dissimilarity blurring of image gradient = 0  \n');
fprintf(FID, 'Image dissimilarity blurring of image hessian = 0  \n');
fprintf(FID, 'No. of target bins                       = 56  \n');
fprintf(FID, 'No. of source bins                       = 59  \n');
fprintf(FID, 'Use Parzen window estimation             = Yes  \n');
fprintf(FID, 'Pad Parzen window estimation             = No  \n');
fprintf(FID, 'Bending energy weight (signed)           = 0.0005  \n');
fprintf(FID, 'Bending energy relative to initial value = No  \n');
fprintf(FID, 'Bending energy at passive control points = No  \n');
fprintf(FID, 'Bending energy w.r.t. world              = Yes  \n');
fprintf(FID, 'Bending energy use lattice spacing       = No  \n');
fprintf(FID, 'Bending energy annealing rate (experimental) = 0  \n');
fprintf(FID, 'Linear energy weight (signed)            = 0.0005  \n');
fprintf(FID, 'Linear energy relative to initial value  = No  \n');
fprintf(FID, 'Linear energy at passive control points  = No  \n');
fprintf(FID, 'Linear energy approximate                = Yes  \n');
fprintf(FID, 'Linear energy w.r.t. world               = Yes  \n');
fprintf(FID, 'Linear energy use lattice spacing        = No  \n');
fprintf(FID, 'Linear energy rotation                   = Yes  \n');
fprintf(FID, 'Linear energy lambda                     = 0  \n');
fprintf(FID, 'Linear energy mu                         = 1  \n');
fprintf(FID, 'Topology preservation weight (signed)    = 0.1  \n');
fprintf(FID, 'Topology preservation relative to initial value = No  \n');
fprintf(FID, 'Topology preservation at passive control points = No  \n');
fprintf(FID, 'Topology preservation domain             = Shifted  \n');
fprintf(FID, 'Topology preservation w.r.t. world       = Yes  \n');
fprintf(FID, 'Topology preservation use lattice spacing = No  \n');
fprintf(FID, 'Topology preservation symmetric          = Yes  \n');
fprintf(FID, 'Topology preservation gamma              = 0.5  \n');
fprintf(FID, 'Topology preservation epsilon            = 0.01  \n');
fprintf(FID, 'Topology preservation power              = 2  \n');
fprintf(FID, 'Volume preservation weight (signed)      = 0.1  \n');
fprintf(FID, 'Volume preservation relative to initial value = No  \n');
fprintf(FID, 'Volume preservation at passive control points = No  \n');
fprintf(FID, 'Volume preservation domain               = Lattice  \n');
fprintf(FID, 'Volume preservation w.r.t. world         = Yes  \n');
fprintf(FID, 'Volume preservation use lattice spacing  = No  \n');
fprintf(FID, 'Volume preservation symmetric            = Yes  \n');
fprintf(FID, 'Volume preservation epsilon              = 0.005  \n');
fprintf(FID, 'LogJac penalty weight (signed)           = 0  \n');
fprintf(FID, 'LogJac penalty relative to initial value = No  \n');
fprintf(FID, 'LogJac penalty at passive control points = No  \n');
fprintf(FID, 'LogJac penalty domain                    = Lattice  \n');
fprintf(FID, 'LogJac penalty w.r.t. world              = Yes  \n');
fprintf(FID, 'LogJac penalty use lattice spacing       = No  \n');
fprintf(FID, 'LogJac penalty symmetric                 = Yes  \n');
fprintf(FID, 'LogJac penalty epsilon                   = 0.005  \n');
fprintf(FID, 'NegJac penalty weight (signed)           = 0  \n');
fprintf(FID, 'NegJac penalty relative to initial value = No  \n');
fprintf(FID, 'NegJac penalty at passive control points = No  \n');
fprintf(FID, 'NegJac penalty domain                    = Shifted  \n');
fprintf(FID, 'NegJac penalty w.r.t. world              = Yes  \n');
fprintf(FID, 'NegJac penalty use lattice spacing       = No  \n');
fprintf(FID, 'NegJac penalty symmetric                 = Yes  \n');
fprintf(FID, 'NegJac penalty gamma                     = 0.5  \n');
fprintf(FID, 'NegJac penalty epsilon                   = 0.01  \n');
fprintf(FID, 'NegJac penalty power                     = 2  \n');
fprintf(FID, 'Sparsity weight (signed)                 = 0  \n');
fprintf(FID, 'Sparsity relative to initial value       = No  \n');
fprintf(FID, 'Sparsity at passive control points       = No  \n');
fprintf(FID, 'Normalize energy gradients (experimental) = No  \n');
fprintf(FID, 'Energy preconditioning                   = 0  \n');
fprintf(FID, 'Exclude constraints from energy value    = No  \n');
fprintf(FID, 'Maximum no. of iterations                = 100  \n');
fprintf(FID, 'Epsilon                                  = -0.0001  \n');
fprintf(FID, 'Delta                                    = 1e-12  \n');
fprintf(FID, 'No. of last function values              = 2  \n');
fprintf(FID, 'Maximum no. of line iterations           = 12  \n');
fprintf(FID, 'Maximum streak of rejected steps         = 3  \n');
fprintf(FID, 'Reuse previous step length               = Yes  \n');
fprintf(FID, 'Strict incremental step length range     = Yes  \n');
fprintf(FID, 'Strict total step length range           = No  \n');
fprintf(FID, 'Step length rise                         = 1.1  \n');
fprintf(FID, 'Step length drop                         = 0.5  \n');
fprintf(FID, 'Maximum no. of line search iterations    = 12  \n');
fprintf(FID, 'Strict step length range                 = Yes  \n');
fprintf(FID, 'Maximum no. of restarts                  = 100  \n');
fprintf(FID, 'Maximum no. of failed restarts           = 5  \n');
fprintf(FID, 'Line search strategy                     = Adaptive  \n');
fprintf(FID, 'Conjugate total energy gradient          = Yes  \n');
fprintf(FID, 'Resolution [mm]                          = 8 8 2  \n');
fprintf(FID, 'Blurring [mm]                            = 0  \n');
fprintf(FID, 'Control point spacing [mm]               = 160  \n');
